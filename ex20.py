from sys import argv

#스크립트에 전달할 실행인자들을 나열한다. 첫 번째 실행인자는 언제나 스크립트 자신이다.
스크립트, 입력_파일 = argv

# 함수명:"모두_출력", "파일"을 매개 변수로 받는다.
#(파일.read())는 "파일"이라는 파일의 내용 전체를 문자열로 리턴한다.
def 모두_출력(파일):
    print(파일.read())

# 함수명: "되감기", "파일"을 매개 변수로 받는다.
#seek은 파일의 객체 위치를 변경할 때 사용하는 함수이다.
#seek(0)은 "파일"이라는 파일의 "0"바이트 부분을 기준으로 위치를 설정한다.
def 되감기(파일):
    파일.seek(0)

# 함수명: "한_줄_출력", "줄_수"와 "파일"을 매개변수로 받는다.
# 이 함수의 기능은 readline을 통해 파일의 내용을 모두 읽고, 각 줄을 하나의 요소로 가진 리스트를 만든다.
# readline()은 파일에서 바이트를 하나씩 읽다가 \n 문자를 만나면 멈추고, 그동안 읽은 문자열을 반환한다.
def 한_줄_출력(줄_수, 파일):
    print(줄_수, 파일.readline(), end='')

#"입력_파일"을 읽기모드로 열어서 "현재_파일" 안에 담는다.
현재_파일 = open(입력_파일, encoding='utf-8')

#"모두_출력"함수에 "현재_파일"을 담고 이 함수의 기능"print(파일.read())"를 실행하여 값을 출력한다.
print("파일 전체를 출력해봅시다.\n")
모두_출력(현재_파일)

print("이번에는 테이프처럼 되감아봅시다.")
되감기(현재_파일)

print("세 줄을 출력해봅시다.")
현재_줄_수 = 0   #첫줄을 읽다가 \n을 만나면 "0"과 함께 그 줄을 출력한다.
한_줄_출력(현재_줄_수, 현재_파일)

현재_줄_수 = 현재_줄_수 + 1  #현재_줄_수 =0에 1바이트를 추가한 값 1과 그 줄을 출력한다.
한_줄_출력(현재_줄_수, 현재_파일)

현재_줄_수 = 현재_줄_수 + 1  #현재_줄_수=1에 1바이트를 추가한 값 2와 그 줄을 출력한다.
한_줄_출력(현재_줄_수, 현재_파일)
