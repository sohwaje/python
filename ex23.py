#[코드 정의]
# 이 코드는 바이트를 문자열로 decode하고, 문자열을 바이트로 인코드하는 코드이다.

#[코드 구성]
# 첫 번재 함수는 함수 안에서 함수를 호출하며 if문에 의해 제어 받는다.
# 두 번째 함수는 첫 번째 함수가 넘겨준 데이터를 가공한다.

#[코드 사용법]: 파이선, 코드, 코덱, 에러
#예제 : python3.7 ex23.py utf-8 strict

import sys
스크립트, 입력_인코딩, error = sys.argv

#=============================함수 정의 시작=================================
#[1] 3개의 인자를 받는 main 함수를 정의한다.
def main(언어_파일, 인코딩, errors):
# language.txt의 한 줄(0바이트부터 \n까지)을 읽는다.
    줄 = 언어_파일.readline()
#[2] 조건절 변수가 참인지 거짓인지를 판단한다. readline 함수가 어떠한 값을 돌려주는 한 "if 줄:"은 언제나 참이다.
    if 줄:
        줄_출력(줄, 인코딩, errors) #readline으로부터 받은 줄을 출력하는 줄_출력 함수.[4]에 정의된 함수
#[3] main 함수를 다시 호출한다.
        return main(언어_파일, 인코딩, errors)

#[4] 3개의 인자를 가진 줄_출력 함수를 정의한다.
def 줄_출력(줄, 인코딩, errors):
    다음_언어 = 줄.strip() #strip은 문자열 뒤에 붙어 있는 \n을 벗겨낸다.
    #다음_언어를 셍+바이트얄로 인코딩한다.
    생_바이트열 = 다음_언어.encode(인코딩, errors=errors)
    #생_바이트열을 요리한_문자열로 디코딩한다.
    요리한_문자열 = 생_바이트열.decode(인코딩, errors=errors)
    # "<===>"를 가운데 두고 왼쪽은 생_바이트열, 오른쪽엔 요리한_문자열을 출력한다.
    # ex) # b'\xe6\x96\x87\xe8\xa8\x80' <===> 文言
#[5]
    print(생_바이트열, "<===>", 요리한_문자열)
#=========================함수 정의 끝======================================

#[6]language.txt 파일을 읽기 모드로 연다.
언어들 = open("languages.txt", encoding='utf-8')

#[7] main함수를 실행한다. 즉, 8행에 정의된 main 함수를 실행한다.
main(언어들, 입력_인코딩, error)

#코드 실행 순서
# [6] -> [7] ->[1] -> [2] -> [3] -> [4] -> [5]
